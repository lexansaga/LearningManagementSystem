security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        # Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
            # a hasher used in the past for some users
            legacy:
                algorithm: sha256
                encode_as_base64: false
                iterations: 1
            App\Entity\Students:
                algorithm: auto
                migrate_from:
                    - bcrypt # uses the "bcrypt" hasher with the default options
                    - legacy # uses the "legacy" hasher configured above
            App\Entity\Faculty:
                # the new hasher, along with its option
                algorithm: auto
                migrate_from:
                    - bcrypt # uses the "bcrypt" hasher with the default options
                    - legacy # uses the "legacy" hasher configured above

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Faculty
                property: username
            
        student_user_provider:
            entity:
                class: App\Entity\Students
                property: email
            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            pattern: ^/
            custom_authenticator: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        
        - { path: dashboard, roles: ROLE_USER }
        - { path: student, roles: ROLE_USER }
        - { path: retake, roles: ROLE_USER }
        - { path: showallactivities, roles: ROLE_USER }
        - { path: grading, roles: ROLE_USER }
        - { path: profile, roles: ROLE_USER }
        - { path: viewStudent, roles: ROLE_USER }
        - { path: subjects, roles: ROLE_USER }
        - { path: viewSubjects, roles: ROLE_USER }
        - { path: removeActivity, roles: ROLE_USER }
        - { path: grades, roles: ROLE_USER }
        - { path: classrooms, roles: ROLE_USER }
        - { path: gradeStudent, roles: ROLE_USER }
        - { path: showClassroom, roles: ROLE_USER }
        - { path: showClassroomModule, roles: ROLE_USER }
        - { path: showClassroomActivities, roles: ROLE_USER }
        - { path: showUploadPayment, roles: ROLE_USER }
        - { path: getUploadedFile, roles: ROLE_USER }
        - { path: showstudentactivity, roles: ROLE_USER }
        - { path: addActivity, roles: ROLE_USER }
        - { path: submitActivity, roles: ROLE_USER }
        - { path: addReceipt, roles: ROLE_USER }
        - { path: removeReceipt, roles: ROLE_USER }
        - { path: removeModule, roles: ROLE_USER }
        - { path: uploadModules, roles: ROLE_USER }
        - { path: addpoints, roles: ROLE_USER }
        - { path: app_login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        
